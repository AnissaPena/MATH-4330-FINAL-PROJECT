A = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00], [0.3025, 0.36, 0.4225, 0.49, 0.5625, 0.64, 0.7225, 0.81, 0.9025, 1], [0.166375, 0.216, 0.274625, 0.343, 0.421875, 0.512, 0.614125, 0.729, 0.857375, 1]]

y = [1.102, 1.099, 1.017, 1.111, 1.117, 1.152, 1.265, 1.380, 1.575, 1.857]


def normalize(vector):
  '''
  normalize(vector),This function takes the infinity norm and with that it normalizes a vector. Giving a normalize vector with respect to the infinity norm as a return.
  '''
  new = [] 
  for i in range(len(vector)):
    total = 0 #following after the for because there is no addition 
    total += vector[i] * (1 / norm(vector)) #the vector its divided by the two norm
    new.append(total)
  return new


def norm(vector):
  '''
  norm(vector) this function takes a vector as its argument and then computes the sum of the squares of each element in the vector. Then it returns the square root of the given sum.
  '''
  total = 0 #put before for addition purposes
  # this for loop examines if each element in the vector is a number
  for i in range(len(vector)):
    total += vector[i] ** 2 #squaring the elements in the vector
  total = total**(1/2)# #taking the square root of the above sum.
  return total


def ScaVecMulti(scalar, vector):
  '''
  this function takes a scalar and a vector as the arguments and then gives the product of the scalar and vector when they are multiplied with each other
  
  '''
  new = [] 
  for i in range(len(vector)):
    total = 0
    total += vector[i] * scalar #each element of the vector is multiplied by the scalar
    new.append(total)
  return new

def VecSub(vector01, vector02):
  '''
  This function takes two vectors as its arguments and then subtracts each element in sequence and then returns in a new vector.
  '''
  if len(vector01) != len(vector02):
    print('invalid input')
    return None
    for i in range(len(vector01)):
      if (type(vector01[i]) != int) and (type(vector01[i]) != float) and (type(vector01[i] != complex)):
        print('invalid input')
  new = [] 
  for i in range(len(vector01)):
    total = 0 #used as a reset
    total += vector01[i] - vector02[i]#takes each element separately and subtracts them from vector02 and vector01.
    new.append(total) 
  return new


def dot(vector01, vector02):
  '''
  This function takes two vectors and multiplies each element together and then adds them.
  '''
  if len(vector01) != len(vector02):
    print('invalid input')
    for i in range(len(vector01)):
      if (type(vector01[i]) != int) and (type(vector01[i]) != float) and (type(vector01[i] != complex)):
        print('invalid input')
  total = 0 #used previous to the for because it needs to preform addition
  for i in range(len(vector01)):
    total += vector01[i] * vector02[i] #each of the elements in the vectors are multipled and then the are added together to form a scalar.
  return total


def GrSc(A):
  '''
  this function uses the matrix A as the argument by using the the Gram Schmidt algorithm to give the Q and R. Then it uses the previous functions of the norm, normalize, dot, ScaVecMulti and the vector subtraction and gives the QR factorization.
  '''
  n = len(A) 
  m = len(A[0]) 
  Q = [[0] * m for i in range(n)] 
  R = [[0] * n for i in range(n)] 
  v = [[0] * m for i in range(n)] 
  if len(A) != len(v):
    print('invalid input')
  for i in range(n):
    v[i] = A[i] #the v[i] is used as the individual vectors of matrix A.
  for i in range(n):
    R[i][i] = norm(v[i]) #evaluates the norm function above
    Q[i] = normalize(v[i]) #uses the normalize function from the previous statement
    for j in range(i + 1, n):
      R[i][j] = dot(Q[i],v[j]) #uses the norm vector and the other vectors and multiplies them with each other, and then finally adds them to create the scalar.
      temp = ScaVecMulti(R[i][j], Q[i]) #uses both the dot product and the normalize vector and then multiplies them together.
      v[j] = VecSub(v[j],temp) #ScaVecMulti is subtracted from the vectors.
  return [Q, R]
QR = GrSc(A) #shows the QR for the independent Q and R.

Q = QR[0] 
R = QR[1] 

'''
def trans(Q):
  m = len(Q)
  n = len(Q[0])
  new = [[0] * m for i in range(n)]
  for i in range(len(Q)):
    for j in range(len(Q[0])):
      new[j][i] = Q[i][j]
  return new
QT = trans(Q)
'''

def transmatvecMulti(Q, y):
  '''
  This function takes the matrix Q and the vector y as the arguments and multiplies them together. The transform of Q was asked for by the quiz, but since I used the function for the matvecMulti that utilizes a matrix made of rows, instead of columns. Therefore Q can be used, since it is made up of column vectors.
  '''
  new = [] 
  for i in range(len(Q)):
    product = 0 # Because we don't want the presence of addition we add it after the above statement
    for j in range(len(y)):
      product += Q[i][j] * y[j]
    new.append(product)
  return new
b = transmatvecMulti(Q, y) #establishing what is b
# back substitution is evaluating the is finding the unknown by beginning with the end.

def backsub(R, b):
  '''
  this function takes the the vector R and the vector b and gives us the unknowns c. Backwards substitution begins with the last unknown, computes it, and then uses it to solve for the following unknown.
  '''
  a = len(b) - 1
  c = [0] * len(b)
  c[a] = b[a] / R[a][a]
  for i in range(a, 0, -1):
    c[i] = b[i]
    for j in range(i +1, a):
      c[i] = c[i] - c[j]*R[j][i]
      c[i] = c[i] / R[i][i]
  return c
print(A)
print(GrSc(A))
print(backsub(R, b))
